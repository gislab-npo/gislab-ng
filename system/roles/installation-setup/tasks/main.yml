---
#
### INSTALLATION SETUP ###
#
# Set basic environment. This role is used both for installation and tests.

### SANITY CHECKS
- name: Check Ansible version (== 2)
  assert:
    that:
      - ansible_version.major == 2
      - ansible_version.minor >= 1

- name: Check if server is running supported operating system
  assert:
    that:
      - ansible_distribution == "Ubuntu"
      - ansible_distribution_version == "{{ GISLAB_UBUNTU_VERSION_NUMBER }}"


- name: Check if GIS.lab ID (GISLAB_ID) is set
  assert:
    that:
      - GISLAB_ID|default(False)

- name: Check if GIS.ab server role name (GISLAB_ROLE) is set
  assert:
    that:
      - GISLAB_ROLE|default(False)


### VARIABLES
- name: Detect if it is possible to get GIS.lab version from Git
  local_action: shell git describe 2> /dev/null || echo "GIT-NOT-AVAILABLE"
  become: no
  register: gislab_version_git_status
  changed_when: False

- name: Detect GIS.lab version from Git
  local_action: shell git describe
  become: no
  register: gislab_version
  when: gislab_version_git_status.stdout != "GIT-NOT-AVAILABLE"

- name: Set GIS.lab version from Git
  set_fact:
    GISLAB_VERSION: "{{ gislab_version.stdout }}"
  when: gislab_version_git_status.stdout != "GIT-NOT-AVAILABLE"


- name: Generate unique string for this installation or test
  shell: >
    date +"%Y%m%d%H%M%S"
    |
    md5sum
    |
    awk -F " " '{print $1}'
  register: gislab_install_unique_string
  changed_when: False

- name: Set unique string for installation
  set_fact:
    GISLAB_INSTALL_UNIQUE_STRING: "{{ gislab_install_unique_string.stdout }}"

- name: Set unique string for test run
  set_fact:
    GISLAB_TEST_UNIQUE_STRING: "{{ GISLAB_INSTALL_UNIQUE_STRING }}"


- name: Detect current date and time
  set_fact:
    GISLAB_INSTALL_DATETIME: "{{ ansible_date_time.date }}-{{ ansible_date_time.time }}"

- name: Detect provisioning user name
  set_fact:
    GISLAB_PROVISIONING_USER: "{{ ansible_user }}"


- name: Set system IP address variable
  set_fact:
    GISLAB_SYSTEM_IP_ADDRESS: "{{ hostvars[inventory_hostname]['ansible_'
                              + GISLAB_NETWORK_DEVICE]['ipv4'].address }}"


- name: Detect closest apt mirrors based on geographic location
  uri:
    url: http://mirrors.ubuntu.com/mirrors.txt
    return_content: yes
  register: repository_mirrors

- name: Set apt mirror
  set_fact:
    GISLAB_APT_MIRROR: "{{ repository_mirrors.content.splitlines()[0] }}"


### PATH VARIABLES
# system-wide path variables
# can be used in Ansible and shell scripts
# don't forget to add to 'functions.sh' when adding variable here !
- name: Set GIS.lab installation root directory
  set_fact:
    GISLAB_ROOT: /opt/gislab


- name: Set GIS.lab admin tools installation root directory
  set_fact:
    GISLAB_PATH_ADMIN: "{{ GISLAB_ROOT }}/admin"

- name: Set GIS.lab custom installation root directory
  set_fact:
    GISLAB_PATH_CUSTOM: "{{ GISLAB_ROOT }}/custom"

- name: Set GIS.lab secret files installation root directory
  set_fact:
    GISLAB_PATH_SECRET: "{{ GISLAB_ROOT }}/secret"

- name: Set GIS.lab system installation root directory
  set_fact:
    GISLAB_PATH_SYSTEM: "{{ GISLAB_ROOT }}/system"

- name: Set GIS.lab storage root directory
  set_fact:
    GISLAB_PATH_STORAGE: "/storage"


# temporary variable valid only for Ansible
- name: Set temporary directory for installation or test
  set_fact:
    GISLAB_PATH_TMP: /tmp/gislab-{{ GISLAB_INSTALL_UNIQUE_STRING }}


### DIRECTORIES STRUCTURE
- name: Create general GIS.lab directories structure
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    state: directory
  with_items:
    - {
        path: "{{ GISLAB_PATH_STORAGE }}",
        owner: root,
        group: root,
        mode: "0755"
      }
    - {
        path: "{{ GISLAB_PATH_TMP }}",
        owner: root,
        group: root,
        mode: "0755"
      }
  become: yes

# vim: set ts=2 sts=2 sw=2 et:
