---

#
###  AUTHENTICATION - LDAP ###
#
# Install authentication database and service.


- name: Install packages
  apt:
    pkg: "{{ item }}"
    force: yes
    install_recommends: no
    state: latest
  # libpam-cracklib is improving strength of user passwords. It is also
  # responsible for setting of PAM 'authtok'. If libpam-cracklib is not
  # installed, change 'use_authtok' option in /etc/pam.d/common-password to
  # 'try_authtok' or remove it, otherwise it will be impossible to change user
  # password using 'passwd' command.
  with_items:
    - auth-client-config
    - ldap-utils
    - libpam-cracklib
    - libpam-ldap
    - libnss-ldap
    - pwgen
    - slapd
  environment: "{{ proxy_env }}"
  become: yes


### LDAP USER GROUP
- name: Add openldap user to ssl-cert group
  shell: >
    adduser openldap ssl-cert 2> /dev/null
    ||
    true
  become: yes


### LDAP STORAGE
# AppArmor configuration
- name: Allow slapd to access /storage directory
  template:
    src: apparmor/usr.sbin.slapd.j2
    dest: /etc/apparmor.d/local/usr.sbin.slapd
  notify:
    - service apparmor reload
  become: yes

- meta: flush_handlers


# move to /storage
- name: Stop LDAP database
  service:
    name: slapd
    state: stopped
  become: yes

- name: Move LDAP database to storage directory (run only once)
  shell: >
    mv -f /var/lib/ldap {{ GISLAB_PATH_STORAGE }}/
    &&
    ln -s {{ GISLAB_PATH_STORAGE }}/ldap /var/lib/ldap
  args:
    creates: "{{ GISLAB_PATH_STORAGE }}/ldap/data.mdb"
  become: yes

- name: Start LDAP service
  service:
    name: slapd
    state: started
  become: yes


# load new configuration
- name: Load new storage configuration
  template:
    src: ldap/ldif/config-storage.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/config-storage.ldif"
  become: yes

- name: Install new storage configuration
  shell: >
    ldapmodify
    -Q
    -Y EXTERNAL
    -H ldapi:///
    -f "{{ GISLAB_PATH_TMP }}/config-storage.ldif"
  become: yes


# remove old storage directory
- name: Remove old LDAP database storage directory
  file:
    dest: /var/lib/ldap
    state: absent
  become: yes


### LDAP CLIENT
- name: LDAP clients configuration
# configure base DN and URI and disable certificates verification
  template:
    src: ldap/ldap.conf.j2
    dest: /etc/ldap/ldap.conf
  notify:
    - service slapd restart
  become: yes

- name: Configure nsswitch
  template:
    src: ldap/nsswitch.conf.j2
    dest: /etc/nsswitch.conf
  notify:
    - service slapd restart
  become: yes


### ADMIN PASSWORD
- name: Generate LDAP admin password (run only once)
  shell: >
    echo
    -n $(pwgen -s -N 1 10)
    > {{ GISLAB_PATH_SECRET }}/gislab_ldap_password.txt
  args:
    creates: "{{ GISLAB_PATH_SECRET }}/gislab_ldap_password.txt"
  become: yes

- name: Generate hash of LDAP admin password
  shell: >
    slappasswd
    -s $(cat {{ GISLAB_PATH_SECRET }}/gislab_ldap_password.txt)
    -h {SSHA}
  register: ldap_admin_password_hash
  changed_when: False
  become: yes

- name: Set LDAP admin password
  shell: >
    printf
    'dn:
    olcDatabase={1}mdb,cn=config\nreplace:
    olcRootPW\nolcRootPW: {{ ldap_admin_password_hash.stdout }}\n'
    |
    ldapmodify
    -Q
    -Y EXTERNAL
    -H ldapi:///
  changed_when: False
  become: yes


### SSL
- name: Install LDAP certificate template
  template:
    src: ssl/gislab-ldap.conf.j2
    dest: /etc/ssl/templates/gislab-ldap.conf
  become: yes

- name: Generate LDAP private key (run only once)
  shell: >
    certtool --generate-privkey
    --bits 1024
    --outfile /etc/ssl/private/gislab_slapd.key
  args:
    creates: /etc/ssl/private/gislab_slapd.key
  become: yes

- name: Set ownership and permissions for LDAP private key
  shell: "{{ item }} /etc/ssl/private/gislab_slapd.key"
  with_items:
    - chgrp ssl-cert
    - chmod g+r
    - chmod o-r
  become: yes


- name: Generate LDAP certificate (run only once)
  shell: >
    certtool
    --generate-certificate
    --load-privkey /etc/ssl/private/gislab_slapd.key
    --load-ca-privkey {{ GISLAB_PATH_SECRET }}/gislab_ca.key
    --load-ca-certificate /etc/ssl/certs/gislab_ca.pem
    --template /etc/ssl/templates/gislab-ldap.conf
    --outfile /etc/ssl/certs/gislab_slapd.pem
  args:
    creates: /etc/ssl/certs/gislab_slapd.pem
  notify:
    - service slapd restart
  become: yes


- name: Load TLS certificates configuration
  template:
    src: ldap/ldif/config-tls.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/config-tls.ldif"
  become: yes

- name: Install TLS certificates configuration
  shell: >
    ldapmodify
    -Q
    -Y EXTERNAL
    -H ldapi:///
    -f "{{ GISLAB_PATH_TMP }}/config-tls.ldif"
  notify:
    - service slapd restart
  become: yes


### LDAP TREE
# GIS.lab user groups
- name: Detect if LDAP user groups unit is installed
  shell: >
    ldapsearch
    -Q
    -LLL
    -Y EXTERNAL
    -H ldapi:///
    '(&(objectClass=organizationalUnit)(ou=groups))' 2>/dev/null
    |
    grep 'objectClass: organizationalUnit'
    ||
    echo 'EMPTY'
  args:
    executable: /bin/bash
  register: ldap_groups_status
  changed_when: False
  become: yes


- name: Load LDAP user groups unit
  template:
    src: ldap/ldif/unit-groups.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/unit-groups.ldif"
  when: ldap_groups_status.stdout == "EMPTY"
  become: yes

- name: Install LDAP user groups unit (run only once)
  shell: >
    ldapadd
    -Z
    -y {{ GISLAB_PATH_SECRET }}/gislab_ldap_password.txt
    -D "cn=admin,dc=gis,dc=lab"
    -f "{{ GISLAB_PATH_TMP }}/unit-groups.ldif"
  when: ldap_groups_status.stdout == "EMPTY"
  become: yes


# GIS.lab users
- name: Detect if LDAP user unit is installed
  shell: >
    ldapsearch
    -Q
    -LLL
    -Y EXTERNAL
    -H ldapi:///
    '(&(objectClass=organizationalUnit)(ou=people))' 2>/dev/null
    |
    grep 'objectClass: organizationalUnit'
    ||
    echo 'EMPTY'
  args:
    executable: /bin/bash
  register: ldap_people_status
  changed_when: False
  become: yes


- name: Load LDAP users unit
  template:
    src: ldap/ldif/unit-users.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/unit-users.ldif"
  when: ldap_people_status.stdout == "EMPTY"
  become: yes

- name: Install LDAP users unit (run only once)
  shell: >
    ldapadd
    -Z
    -y {{ GISLAB_PATH_SECRET }}/gislab_ldap_password.txt
    -D "cn=admin,dc=gis,dc=lab"
    -f "{{ GISLAB_PATH_TMP }}/unit-users.ldif"
  when: ldap_people_status.stdout == "EMPTY"
  become: yes


# LDAP sudo
- name: Install LDAP sudo support
  shell: >
    DEBIAN_FRONTEND=noninteractive
    SUDO_FORCE_REMOVE=yes
    apt-get -y install sudo-ldap
  notify:
    - service slapd restart
  become: yes

- name: Load sudo LDAP schema
  template:
    src: ldap/ldif/schema-sudo.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/schema-sudo.ldif"
  become: yes

- name: Install sudo LDAP schema (run only once)
  shell: >
    ldapadd
    -Q
    -Y EXTERNAL
    -H ldapi:///
    -f "{{ GISLAB_PATH_TMP }}/schema-sudo.ldif"
  args:
    creates: "/etc/ldap/slapd.d/cn=config/cn=schema/cn={4}sudo.ldif"
  become: yes


- name: Detect if sudo LDAP unit is installed
  shell: >
    ldapsearch
    -Q
    -LLL
    -Y EXTERNAL
    -H ldapi:///
    '(&(objectClass=organizationalUnit)(ou=SUDOers))' 2>/dev/null
    |
    grep 'objectClass: organizationalUnit'
    ||
    echo 'EMPTY'
  args:
    executable: /bin/bash
  register: ldap_sudoers_status
  changed_when: False
  become: yes

- name: Load sudo LDAP unit
  template:
    src: ldap/ldif/unit-sudo.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/unit-sudo.ldif"
  when: ldap_sudoers_status.stdout == "EMPTY"
  become: yes

- name: Install sudo LDAP unit (run only once)
  shell: >
    ldapadd
    -Z
    -y {{ GISLAB_PATH_SECRET }}/gislab_ldap_password.txt
    -D "cn=admin,dc=gis,dc=lab"
    -f "{{ GISLAB_PATH_TMP }}/unit-sudo.ldif"
  when: ldap_sudoers_status.stdout == "EMPTY"
  become: yes


# LDAP email schema
- name: Load email LDAP schema
  template:
    src: ldap/ldif/schema-postfix.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/schema-postfix.ldif"
  become: yes

- name: Install email LDAP schema (run only once)
  shell: >
    ldapadd
    -Q
    -Y EXTERNAL
    -H ldapi:///
    -f "{{ GISLAB_PATH_TMP }}/schema-postfix.ldif"
  args:
    creates: "/etc/ldap/slapd.d/cn=config/cn=schema/cn={5}postfix.ldif"
  become: yes


- name: Detect if email LDAP unit is installed
  shell: >
    ldapsearch
    -Q
    -LLL
    -Y EXTERNAL
    -H ldapi:///
    '(&(objectClass=organizationalUnit)(ou=mailaliases))' 2>/dev/null
    |
    grep 'objectClass: organizationalUnit'
    ||
    echo 'EMPTY'
  args:
    executable: /bin/bash
  register: ldap_mailaliases_status
  changed_when: False
  become: yes

- name: Load email LDAP unit
  template:
    src: ldap/ldif/unit-email.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/unit-email.ldif"
  when: ldap_mailaliases_status.stdout == "EMPTY"
  become: yes

- name: Install email LDAP unit (run only once)
  shell: >
    ldapadd
    -Z
    -y {{ GISLAB_PATH_SECRET }}/gislab_ldap_password.txt
    -D "cn=admin,dc=gis,dc=lab"
    -f "{{ GISLAB_PATH_TMP }}/unit-email.ldif"
  when: ldap_mailaliases_status.stdout == "EMPTY"
  become: yes


# LDAP indexes
- name: Load LDAP indexes
  template:
    src: ldap/ldif/config-indexes.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/config-indexes.ldif"
  become: yes

- name: Install LDAP indexes
  shell: >
    ldapmodify
    -Q
    -Y EXTERNAL
    -H ldapi:///
    -f "{{ GISLAB_PATH_TMP }}/config-indexes.ldif"
  become: yes

- meta: flush_handlers


### PAM
# TODO: consider moving PAM config to some other role which can be used by
# nodes as well
- name: Configure PAM to use Unix and LDAP authentication
  shell: >
    DEBIAN_FRONTEND=noninteractive {{ item }}
  with_items:
    - "pam-auth-update --force"
    - "auth-client-config -t nss -p lac_ldap"
  become: yes

- name: Configure PAM to use LDAP
  template:
    src: ldap/ldap-pam.conf.j2
    dest: /etc/ldap.conf
  become: yes


### LOGGING
- name: Load LDAP logging configuration
  template:
    src: ldap/ldif/config-logging.ldif.j2
    dest: "{{ GISLAB_PATH_TMP }}/config-logging.ldif"
  become: yes

- name: Install LDAP logging configuration
  shell: >
    ldapmodify
    -Q
    -Y EXTERNAL
    -H ldapi:///
    -f "{{ GISLAB_PATH_TMP }}/config-logging.ldif"
  become: yes

# vim: set ts=2 sts=2 sw=2 et:
